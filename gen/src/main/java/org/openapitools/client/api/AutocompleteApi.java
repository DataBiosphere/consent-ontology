/*
 * Ontology Services
 * A set of web-services related to ontology information.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutocompleteApi {
    private ApiClient localVarApiClient;

    public AutocompleteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutocompleteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for autocompleteGet
     * @param q The query term (word fragment) which the service should try and complete. (required)
     * @param types An optional list (comma-separated) of term types; if specified only those types will be searched for autocomplete suggestions. If left unspecified all available types will be searched. Available values for this service will initially be disease and organization. (optional)
     * @param count An optional limit on the number of autosuggested results that are returned. Default value is 20. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompleteGetCall(String q, String types, BigDecimal count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteGetValidateBeforeCall(String q, String types, BigDecimal count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling autocompleteGet(Async)");
        }
        

        okhttp3.Call localVarCall = autocompleteGetCall(q, types, count, _callback);
        return localVarCall;

    }

    /**
     * autocomplete
     * Ontologies can be queried based on term; type and count. This provides an easy filtering mechanism that allows users to select ontology terms that are applicable to consents or research purposes.
     * @param q The query term (word fragment) which the service should try and complete. (required)
     * @param types An optional list (comma-separated) of term types; if specified only those types will be searched for autocomplete suggestions. If left unspecified all available types will be searched. Available values for this service will initially be disease and organization. (optional)
     * @param count An optional limit on the number of autosuggested results that are returned. Default value is 20. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void autocompleteGet(String q, String types, BigDecimal count) throws ApiException {
        autocompleteGetWithHttpInfo(q, types, count);
    }

    /**
     * autocomplete
     * Ontologies can be queried based on term; type and count. This provides an easy filtering mechanism that allows users to select ontology terms that are applicable to consents or research purposes.
     * @param q The query term (word fragment) which the service should try and complete. (required)
     * @param types An optional list (comma-separated) of term types; if specified only those types will be searched for autocomplete suggestions. If left unspecified all available types will be searched. Available values for this service will initially be disease and organization. (optional)
     * @param count An optional limit on the number of autosuggested results that are returned. Default value is 20. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autocompleteGetWithHttpInfo(String q, String types, BigDecimal count) throws ApiException {
        okhttp3.Call localVarCall = autocompleteGetValidateBeforeCall(q, types, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * autocomplete (asynchronously)
     * Ontologies can be queried based on term; type and count. This provides an easy filtering mechanism that allows users to select ontology terms that are applicable to consents or research purposes.
     * @param q The query term (word fragment) which the service should try and complete. (required)
     * @param types An optional list (comma-separated) of term types; if specified only those types will be searched for autocomplete suggestions. If left unspecified all available types will be searched. Available values for this service will initially be disease and organization. (optional)
     * @param count An optional limit on the number of autosuggested results that are returned. Default value is 20. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompleteGetAsync(String q, String types, BigDecimal count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteGetValidateBeforeCall(q, types, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
