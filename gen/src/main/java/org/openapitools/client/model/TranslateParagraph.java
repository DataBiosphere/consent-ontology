/*
 * Ontology Services
 * A set of web-services related to ontology information.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TranslateParagraph
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-08T13:37:16.800722-05:00[America/New_York]")
public class TranslateParagraph {
  public static final String SERIALIZED_NAME_PARAGRAPH = "paragraph";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH)
  private String paragraph;


  public TranslateParagraph paragraph(String paragraph) {
    
    this.paragraph = paragraph;
    return this;
  }

   /**
   * The paragraph to translate
   * @return paragraph
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The paragraph to translate")

  public String getParagraph() {
    return paragraph;
  }


  public void setParagraph(String paragraph) {
    this.paragraph = paragraph;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranslateParagraph translateParagraph = (TranslateParagraph) o;
    return Objects.equals(this.paragraph, translateParagraph.paragraph);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paragraph);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranslateParagraph {\n");
    sb.append("    paragraph: ").append(toIndentedString(paragraph)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

